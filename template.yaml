AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  user-service

  Anecdotario User Service - Manages user accounts, authentication, and certification

Parameters:
  Environment:
    Type: String
    Description: Environment name (dev, staging, prod)
    AllowedValues: [dev, staging, prod]
    Default: dev
  
  TableName:
    Type: String
    Description: DynamoDB table name for users
    Default: "Users-dev"
  
  KMSKeyId:
    Type: String
    Description: KMS Key ID for encryption (optional)
    Default: ""
  
  
  MaxImageSize:
    Type: Number
    Description: Maximum image size in bytes
    Default: "5242880"  # 5MB
  
  ParameterStorePrefix:
    Type: String
    Description: Parameter Store prefix for configuration values
    Default: "/anecdotario/dev/user-service"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30  # Increased for image processing
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        USER_TABLE_NAME: !Ref UserTable
        KMS_KEY_ID: !Ref KMSKeyId
        ALLOWED_ORIGINS: !Sub "https://${Environment}.anecdotario.com,https://anecdotario.com"
        PHOTO_BUCKET_NAME: !Ref PhotoBucket
        MAX_IMAGE_SIZE: !Ref MaxImageSize
        PARAMETER_STORE_PREFIX: !Ref ParameterStorePrefix

Resources:
  PhotoUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: photo-upload/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      MemorySize: 512  # Increased for image processing
      Timeout: 30      # Longer timeout for image processing
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - S3CrudPolicy:
            BucketName: !Ref PhotoBucket
        - Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
            Resource: 
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStorePrefix}/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/anecdotario/${Environment}/cognito/*"
      Events:
        PhotoUpload:
          Type: Api
          Properties:
            Path: /users/{userId}/photo
            Method: post
            RequestParameters:
              - method.request.header.Authorization:
                  Required: true

  UserLookupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-lookup/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      MemorySize: 128  # Minimal memory for read operations
      Timeout: 5       # Short timeout for simple queries
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UserTable
        - Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
            Resource: 
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStorePrefix}/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/anecdotario/${Environment}/cognito/*"
      Events:
        GetUserByNickname:
          Type: Api
          Properties:
            Path: /users/by-nickname/{nickname}
            Method: get
            RequestParameters:
              - method.request.path.nickname:
                  Required: true
              - method.request.header.Authorization:
                  Required: true

  UserCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-create/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      MemorySize: 128  # Minimal memory for write operations
      Timeout: 10      # Slightly longer timeout for database writes
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
            Resource: 
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStorePrefix}/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/anecdotario/${Environment}/cognito/*"
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RequestParameters:
              - method.request.header.Authorization:
                  Required: true

  UserDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-delete/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      MemorySize: 256  # More memory for S3 operations
      Timeout: 30      # Longer timeout for photo cleanup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - S3CrudPolicy:
            BucketName: !Ref PhotoBucket
        - Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
            Resource: 
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStorePrefix}/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/anecdotario/${Environment}/cognito/*"
      Events:
        DeleteUserSelf:
          Type: Api
          Properties:
            Path: /users
            Method: delete
            RequestParameters:
              - method.request.header.Authorization:
                  Required: true
        DeleteUserById:
          Type: Api
          Properties:
            Path: /users/{userId}
            Method: delete
            RequestParameters:
              - method.request.path.userId:
                  Required: true
              - method.request.header.Authorization:
                  Required: true

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: cognito_id
          AttributeType: S
        - AttributeName: nickname
          AttributeType: S
      KeySchema:
        - AttributeName: cognito_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: nickname-index
          KeySchema:
            - AttributeName: nickname
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: user-service

  PhotoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-photos-${Environment}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldPhotos
            Status: Enabled
            ExpirationInDays: 365
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: user-service

Outputs:
  # API Gateway endpoint
  UserServiceApi:
    Description: "API Gateway endpoint URL for environment stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"
  
  # Lambda functions
  PhotoUploadFunction:
    Description: "Photo Upload Lambda Function ARN"
    Value: !GetAtt PhotoUploadFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-PhotoUploadFunctionArn"
  
  UserLookupFunction:
    Description: "User Lookup Lambda Function ARN"
    Value: !GetAtt UserLookupFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UserLookupFunctionArn"
  
  UserCreateFunction:
    Description: "User Create Lambda Function ARN"
    Value: !GetAtt UserCreateFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UserCreateFunctionArn"
  
  UserDeleteFunction:
    Description: "User Delete Lambda Function ARN"
    Value: !GetAtt UserDeleteFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UserDeleteFunctionArn"
  
  # S3 Bucket
  PhotoBucket:
    Description: "S3 bucket for user photos"
    Value: !Ref PhotoBucket
    Export:
      Name: !Sub "${AWS::StackName}-PhotoBucket"
  
  # DynamoDB table
  UserTable:
    Description: "DynamoDB table for users"
    Value: !Ref UserTable
    Export:
      Name: !Sub "${AWS::StackName}-UserTable"
  
  # Environment
  Environment:
    Description: "Deployment environment"
    Value: !Ref Environment
    Export:
      Name: !Sub "${AWS::StackName}-Environment"
