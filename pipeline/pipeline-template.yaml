AWSTemplateFormatVersion: '2010-09-09'
Description: 'CI/CD Pipeline for Anecdotario User Service'

Parameters:
  GitHubOwner:
    Type: String
    Default: araozmd
    Description: GitHub repository owner
  
  GitHubRepo:
    Type: String  
    Default: ancdotario-user-service
    Description: GitHub repository name
    
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch to track
    
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub personal access token
    
Resources:
  # S3 Bucket for build artifacts
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-pipeline-artifacts"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldArtifacts
            Status: Enabled
            ExpirationInDays: 30

  # CodeBuild Service Role
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "${ArtifactsBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt ArtifactsBucket.Arn
        - PolicyName: SAMDeploymentAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # CloudFormation permissions for SAM deployment
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResources
                  - cloudformation:GetTemplate
                  - cloudformation:GetTemplateSummary
                  - cloudformation:CreateChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:ListStackResources
                  - cloudformation:ValidateTemplate
                  - cloudformation:ListStacks
                  - cloudformation:TagResource
                  - cloudformation:UntagResource
                  - cloudformation:ListTagsForResource
                  - cloudformation:GetStackPolicy
                  - cloudformation:SetStackPolicy
                Resource: 
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/user-service-*/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/aws-sam-cli-managed-*/*"
              # SAM Transform permissions for Serverless-2016-10-31
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                Resource: 
                  - "arn:aws:cloudformation:us-east-1:aws:transform/Serverless-2016-10-31"
              # Lambda permissions for SAM deployment
              - Effect: Allow
                Action:
                  - lambda:*
                Resource: "*"
              # API Gateway permissions for SAM deployment
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: "*"
              # DynamoDB permissions for SAM deployment
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
              # IAM permissions for SAM deployment
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:GetRole
                  - iam:PassRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:GetRolePolicy
                  - iam:TagRole
                  - iam:UntagRole
                Resource: 
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/user-service-*"
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/*-user-service-*"
              # S3 permissions for Lambda deployment packages and SAM artifacts
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:GetBucketLocation
                  - s3:GetBucketPolicy
                  - s3:PutBucketPolicy
                  - s3:DeleteBucketPolicy
                  - s3:PutBucketTagging
                  - s3:GetBucketTagging
                  - s3:PutBucketEncryption
                  - s3:GetBucketEncryption
                  - s3:PutBucketVersioning
                  - s3:GetBucketVersioning
                  - s3:PutBucketNotification
                  - s3:GetBucketNotification
                  - s3:PutBucketLifecycleConfiguration
                  - s3:GetBucketLifecycleConfiguration
                  - s3:PutBucketPublicAccessBlock
                  - s3:GetBucketPublicAccessBlock
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:GetObjectVersion
                  - s3:DeleteObjectVersion
                Resource: 
                  - "arn:aws:s3:::aws-sam-cli-managed-default*"
                  - "arn:aws:s3:::aws-sam-cli-managed-default*/*"
                  - !Sub "arn:aws:s3:::aws-sam-cli-sourcebucket-*"
                  - !Sub "arn:aws:s3:::aws-sam-cli-sourcebucket-*/*"
              # S3 permissions for user-service application buckets
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:GetBucketLocation
                  - s3:GetBucketPolicy
                  - s3:PutBucketPolicy
                  - s3:DeleteBucketPolicy
                  - s3:PutBucketEncryption
                  - s3:PutBucketVersioning
                  - s3:PutBucketNotification
                  - s3:PutBucketLifecycleConfiguration
                  - s3:PutBucketPublicAccessBlock
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:GetObjectVersion
                Resource: 
                  - !Sub "arn:aws:s3:::user-service-*"
                  - !Sub "arn:aws:s3:::user-service-*/*"
              # SSM Parameter Store access for application configuration
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: 
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/anecdotario/*"
              # CloudWatch Logs permissions for SAM managed resources
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:DeleteLogGroup
                  - logs:PutRetentionPolicy
                Resource: "*"
              # Additional CloudFormation permissions for managed stack operations
              - Effect: Allow
                Action:
                  - cloudformation:ListStacks
                  - cloudformation:DescribeStacks
                Resource: "*"

  # CodePipeline Service Role
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: 
                  - !GetAtt ArtifactsBucket.Arn
                  - !Sub "${ArtifactsBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: 
                  - !GetAtt BuildProject.Arn
                  - !GetAtt DeployDevProject.Arn
                  - !GetAtt DeployStagingProject.Arn
                  - !GetAtt DeployProdProject.Arn
              - Effect: Allow
                Action:
                  - cloudformation:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"

  # CloudFormation Deploy Role
  CloudFormationDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
        - arn:aws:iam::aws:policy/IAMFullAccess

  # Build Project
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-build"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        EnvironmentVariables:
          - Name: ARTIFACTS_BUCKET
            Value: !Ref ArtifactsBucket
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/buildspec.yml

  # Deploy Development Project
  DeployDevProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-deploy-dev"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        EnvironmentVariables:
          - Name: ENVIRONMENT
            Value: dev
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/deploy-dev-buildspec.yml

  # Deploy Staging Project  
  DeployStagingProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-deploy-staging"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        EnvironmentVariables:
          - Name: ENVIRONMENT
            Value: staging
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/deploy-staging-buildspec.yml

  # Deploy Production Project
  DeployProdProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-deploy-prod"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        EnvironmentVariables:
          - Name: ENVIRONMENT
            Value: prod
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/deploy-prod-buildspec.yml

  # CodePipeline
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${AWS::StackName}-pipeline"
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceOutput
                
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
                
        - Name: DeployDev
          Actions:
            - Name: DeployDevAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref DeployDevProject
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
                
        - Name: DeployStaging
          Actions:
            - Name: DeployStagingAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref DeployStagingProject
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
                
        - Name: DeployProduction
          Actions:
            - Name: ApprovalAction
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              Configuration:
                CustomData: 'Please review and approve production deployment'
              RunOrder: 1
            - Name: DeployProdAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref DeployProdProject
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 2

Outputs:
  PipelineUrl:
    Description: URL of the CodePipeline
    Value: !Sub "https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${Pipeline}/view"
    
  ArtifactsBucket:
    Description: S3 bucket for pipeline artifacts
    Value: !Ref ArtifactsBucket